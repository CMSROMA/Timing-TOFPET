#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
import math

parser = argparse.ArgumentParser(description='Acquire data for QDC calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="fileNamePrefix", required=True, help="Data filename (prefix)")
args = parser.parse_args()

systemConfig = config.ConfigFromFile(args.config, loadMask=config.LOAD_AD5535_CALIBRATION | config.LOAD_SIPM_BIAS)
daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

f = open(args.fileNamePrefix + '.bins', 'w')
f.write("%d\t%f\t%f\n" % (3*200, 0, 200))
f.close()

daqd.openRawAcquisition(args.fileNamePrefix, qdcMode=True)
asicsConfig = daqd.getAsicsConfig()

for ac in asicsConfig.values():
	gc = ac.globalConfig
	for cc in ac.channelConfig:
		# Set QDC mode
		cc.setValue("qdc_mode", 1)
		cc.setValue("intg_en", 1)
		cc.setValue("intg_signal_en", 1)
		# Set simplest trigger_mode_2_* setting
		cc.setValue("trigger_mode_2_t", 0b00)
		cc.setValue("trigger_mode_2_e", 0b000)
		cc.setValue("trigger_mode_2_q", 0b00)
		cc.setValue("trigger_mode_2_b", 0b000)
		
		# Allow full range integration time
		cc.setValue("min_intg_time", 0)
		cc.setValue("max_intg_time", 127)
	
		# Disable channel from triggering.
		# Will selectively enable channels below
		cc.setValue("trigger_mode_1", 0b11)

# This works for worse case scenarion:
# 16 ASIC per FEB/D with GbE interface (max 126 events/frame)
simultaneousChannels = 7

simultaneousChannels = 1 # For debug


channelStep = int(math.ceil(64.0/simultaneousChannels))
for phase in [0.0/3, 1.0/3, 2.0/3]:
	daqd.setTestPulsePLL(100, 1024, phase, False)
	for firstChannel in range(0, channelStep):
		# Enable triggering for this channel
		cfg = deepcopy(asicsConfig)
		for integrationTime in range(0, 200):
			daqd.setTestPulsePLL(integrationTime, 1024, phase, False)
			for ac in cfg.values():
				for channel in range(firstChannel, 64, channelStep):
					ac.channelConfig[channel].setValue("trigger_mode_1", 0b01)
				
			daqd.setAsicsConfig(cfg)
			daqd.acquire(0.02, integrationTime, 0)

systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)
