#!/usr/bin/env python
# -*- coding: utf-8 -*-

from petsys import daqd, config
from copy import deepcopy
import argparse
from time import sleep
import ROOT
from sys import stdout

parser = argparse.ArgumentParser(description='Acquire data for threshold calibration')
parser.add_argument("--config", type=str, required=True, help="Configuration file")
parser.add_argument("-o", type=str, dest="outFilePrefix", required=True, help="Data file prefix")
parser.add_argument("--nreads-noise", dest="noise_reads", type=int, required=False, default=4)
parser.add_argument("--nreads-dark", dest="dark_reads", type=int, required=False, default=4)
args = parser.parse_args()

systemConfig = config.ConfigFromFile(args.config, loadMask=config.LOAD_AD5535_CALIBRATION | config.LOAD_SIPM_BIAS)
daqd = daqd.Connection()
daqd.initializeSystem()
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_PREBD)
asicsConfig = daqd.getAsicsConfig()

COUNTER_SETTING = 0x4
COUNT_MAX = 1.0 * (2**22)
T = COUNT_MAX * (1 / daqd.getSystemFrequency())


thresholdList = [ 
	(0,  "vth_t1", "baseline_t" ),
	(1,  "vth_t2", "baseline_t" ),
	(2,  "vth_e", "baseline_e")
]

activeAsics = daqd.getActiveAsics()
activeChannels = [ (portID, slaveID, chipID, channelID) for channelID in range(64) for portID, slaveID, chipID in activeAsics ]

# Adjust baseline

for ac in asicsConfig.values():
	if not ac: continue
	gc = ac.globalConfig
	gc.setValue("counter_period", COUNTER_SETTING)
	for cc in ac.channelConfig:
		cc.setValue("trigger_mode_1", 0)
		cc.setValue("counter_mode", 0xF)
		cc.setValue("trigger_b_latched", 0)

print "Adjusting baseline"
for thresholdIndex, thresholdName, baselineName in thresholdList:
	print thresholdIndex, thresholdName, baselineName

	N_ITERATIONS = 0
	while N_ITERATIONS < 20:
		print baselineName, "ITERATION %d" % N_ITERATIONS

		for ac in asicsConfig.values():
			for cc in ac.channelConfig:
				cc.setValue("vth_t1", 0)
				cc.setValue("vth_t2", 0)
				cc.setValue("vth_e", 0)
				cc.setValue("trigger_mode_2_b", thresholdIndex)
				cc.setValue(thresholdName, 61)
		daqd.setAsicsConfig(asicsConfig)
		sleep(9 * T)

		count_high = {}
		for portID, slaveID, chipID, channelID in activeChannels:
			count_high[(portID, slaveID, chipID, channelID)] = daqd.readFEBDConfig(portID, slaveID, 3, 64*chipID + channelID) / COUNT_MAX


		adjustmentMade = False
		for portID, slaveID, chipID, channelID in activeChannels:
			b = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].getValue(baselineName)
			channelOK = True
			if count_high[(portID, slaveID, chipID, channelID)] < 0.95:
				channelOK = False
				if b > 0:
					new_b = b - 1
					adjustmentMade = True
				else:	
					new_b = b

			else:
				new_b = b
			
			asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].setValue(baselineName, new_b)

			if not channelOK:
				print "Channel (%2d %2d %2d %2d) | %6.1f%% active | %2d -> %2d" % (portID, slaveID, chipID, channelID, 100.0*count_high[(portID, slaveID, chipID, channelID)], b, new_b)


		N_ITERATIONS += 1
		if not adjustmentMade: break


outFile = open(args.outFilePrefix + "_baseline.tsv", "w")
for portID, slaveID, chipID, channelID in activeChannels:
	baseline_T = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].getValue("baseline_t")
	baseline_E = asicsConfig[(portID, slaveID, chipID)].channelConfig[channelID].getValue("baseline_e")

	outFile.write("%d\t%d\t%d\t%d\t%d\t%d\n" % (
		 portID, slaveID, chipID, channelID,
		 baseline_T, baseline_E
	))
outFile.close()

#
# Measure noise/baseline
# 
outFile = open(args.outFilePrefix + "_noise.tsv", "w")
print "Scanning threshold for noise"
noiseProfiles = {}
for thresholdIndex, thresholdName, baselineName in thresholdList:
	stdout.write("%6s " % thresholdName); stdout.flush()

	for thresholdValue in range(0,64):
		for ac in asicsConfig.values():
			for cc in ac.channelConfig:
				cc.setValue("vth_t1", 0)
				cc.setValue("vth_t2", 0)
				cc.setValue("vth_e", 0)
				cc.setValue("trigger_mode_2_b", thresholdIndex)
				cc.setValue(thresholdName, thresholdValue)

		daqd.setAsicsConfig(asicsConfig)
		for n in range(args.noise_reads):
			sleep(9 * T)
			for portID, slaveID, chipID, channelID in activeChannels:
				# Write out fraction of discriminator active time
				v = daqd.readFEBDConfig(portID, slaveID, 3, 64*chipID + channelID) / COUNT_MAX
				outFile.write("%d\t%d\t%d\t%d\t%s\t%d\t%f\n" % (portID, slaveID, chipID, channelID, thresholdName, thresholdValue, v))

		stdout.write(".")
		stdout.flush()
		
	stdout.write("\n")

#
# Measure dark counts
#
outFile = open(args.outFilePrefix + "_dark.tsv", "w")
for ac in asicsConfig.values():
	if not ac: continue
	gc = ac.globalConfig
	gc.setValue("counter_period", COUNTER_SETTING)
	for cc in ac.channelConfig:
		cc.setValue("trigger_mode_1", 0)
		cc.setValue("counter_mode", 0xC)
		cc.setValue("trigger_b_latched", 0)
		cc.setValue("dead_time", 20)

systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_ON)
darkProfiles = {}
print "Scanning threshold for dark counts"
for thresholdIndex, thresholdName, baselineName in thresholdList:
	stdout.write("%6s " % thresholdName); stdout.flush()
	for thresholdValue in range(64):
		for ac in asicsConfig.values():
			for cc in ac.channelConfig:
				cc.setValue("vth_t1", 0)
				cc.setValue("vth_t2", 0)
				cc.setValue("vth_e", 0)
				cc.setValue("trigger_mode_2_b", thresholdIndex)
				cc.setValue(thresholdName, thresholdValue)

		daqd.setAsicsConfig(asicsConfig)
		for n in range(args.dark_reads):
			sleep(9 * T)
			for portID, slaveID, chipID, channelID in activeChannels:
				# Write out event frequency
				v = daqd.readFEBDConfig(portID, slaveID, 3, 64*chipID + channelID) / T
				outFile.write("%d\t%d\t%d\t%d\t%s\t%d\t%f\n" % (portID, slaveID, chipID, channelID, thresholdName, thresholdValue, v))
				
		stdout.write(".")
		stdout.flush()
	stdout.write("\n")
outFile.close()
	
systemConfig.loadToHardware(daqd, bias_enable=config.APPLY_BIAS_OFF)

